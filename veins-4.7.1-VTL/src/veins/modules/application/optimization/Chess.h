#ifndef CHESS_H
#define CHESS_H
/*
	@author Marcello Sgarbi
	@date 07-Feb-2019
*/
/*
***************************************************************************************************************************************************************************
*																			INCLUDE FILES
***************************************************************************************************************************************************************************
*/
#include <iostream>
#include <fstream>
#include <string>
#include <bitset>
#include <array>
#include <stdlib.h>  //system("cls") for clear the consol
#include <Windows.h> //Sleep(Millisecond);



/*
	Per rappresentare la strada viene usata una bitboard per velocizzare le computazioni facendo semplicemente operazioni bit2bit.
		La rappresentazione viene fatta utilizzando utilizzando 256bit per poter considerare fino a 6 veicoli in coda:

		Chess_board = 1111111000111111 1111111000111111 1111111000111111 1111111000111111 1111111000111111 1111111000111111 1000000000000000 1000000000000000 1000000000000000 1111111000111111 1111111000111111 1111111000111111 1111111000111111 1111111000111111 1111111000111111 1111111111111111

		Corresponding to:
							MSB -> 1111111000111111
								1111111000111111
								1111111000111111
								1111111000111111
								1111111000111111
								1111111000111111
								1000000000000000
								1000000000000000
								1000000000000000
								1111111000111111
								1111111000111111
								1111111000111111
								1111111000111111
								1111111000111111
								1111111000111111
								1111111111111111 <- LSB

							chess board inserted by row going upward
			std::bitset<x-bit> mybitset[it start to count from the LSB from 0 to MSB]
*/

class Chess
{
public:
	Chess();
	~Chess();
	void printChess();
	void printChess2file();
	/* clear the chess for the setted signals, it does not act on vehicles */
	void clear();
	std::string findRow(int row);
	void setCarStart(double heading, int position);
	void delCarStart(double heading, int position);
	/* Return the position of the first vehicle from 1 to 6. Return 0 if no vehicle are present in that direction */
	int findFirstPosition(double heading);

	bool isTheFirst(double heading, int myposition);

	bool checkAndSetSignal(double heading, int signal, int position);
	void checkAndRemoveSignal(double heading, int signal, int position);
	int	 checkHeading(double heading);
	
	int	 getNVehicle(double heading);
	bool isPossibleMovement(double heading, int signal, int position);

	std::string getChess() { return m_myChessBit.to_string(); }

private:


	std::string m_myChessStr = "1111111000111111111111100011111111111110001111111111111000111111111111100011111111111110001111111000000000000000100000000000000010000000000000001111111000111111111111100011111111111110001111111111111000111111111111100011111111111110001111111111111111111111";
	std::bitset<256> m_myChessBit;
	
	std::array<int, 4> m_numVehicle = { 0, 0, 0, 0 };
	std::string m_maskStr = "0000000111000000000000011100000000000001110000000000000111000000000000011100000000000001110000000111111111111111011111111111111101111111111111110000000111000000000000011100000000000001110000000000000111000000000000011100000000000001110000000000000000000000";
	std::bitset<256> m_maskBit;

	std::string m_clearMaskStr = "0111111100111111011111110011111101111111001111110111111100111111011111110011111101111111001111110000000000111111000000000000000001111110000000000111111001111111011111100111111101111110011111110111111001111111011111100111111101111110011111110000000000000000";
	std::bitset<256> m_clearMaskBit;

	std::string m_signalE2Str = "0000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	std::string m_signalE3Str = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000001000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000000000000";
	std::string m_signalE4Str = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	std::string m_signalE5Str = "0000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	std::string m_signalE6Str = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111000000000000001000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000000000000";
	std::string m_signalE7Str = "0000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000111111111000000000000001000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000000000000";

	std::string m_signalN2Str = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	std::string m_signalN3Str = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000001000000000000000011111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	std::string m_signalN4Str = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000000000000";
	std::string m_signalN5Str = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000000000000";
	std::string m_signalN6Str = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000011000000000000001011111110000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000000000000";
	std::string m_signalN7Str = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111100000000000000011000000000000001011111110000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000000000000";

	std::string m_signalW2Str = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000000000000";
	std::string m_signalW3Str = "0000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000001000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	std::string m_signalW4Str = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	std::string m_signalW5Str = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111110000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000000000000";
	std::string m_signalW6Str = "0000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000001000000000000001111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	std::string m_signalW7Str = "0000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000001000000000000001111111110000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000000000000";

	std::string m_signalS2Str = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	std::string m_signalS3Str = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111100000000000000001000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	std::string m_signalS4Str = "0000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	std::string m_signalS5Str = "0000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000011111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	std::string m_signalS6Str = "0000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000111111101000000000000001100000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	std::string m_signalS7Str = "0000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000111111101000000000000001100000000000000011111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	
	std::bitset<256> m_signalE2Bit;
	std::bitset<256> m_signalE3Bit;
	std::bitset<256> m_signalE4Bit;
	std::bitset<256> m_signalE5Bit;
	std::bitset<256> m_signalE6Bit;
	std::bitset<256> m_signalE7Bit;

	std::bitset<256> m_signalN2Bit;
	std::bitset<256> m_signalN3Bit;
	std::bitset<256> m_signalN4Bit;
	std::bitset<256> m_signalN5Bit;
	std::bitset<256> m_signalN6Bit;
	std::bitset<256> m_signalN7Bit;

	std::bitset<256> m_signalW2Bit;
	std::bitset<256> m_signalW3Bit;
	std::bitset<256> m_signalW4Bit;
	std::bitset<256> m_signalW5Bit;
	std::bitset<256> m_signalW6Bit;
	std::bitset<256> m_signalW7Bit;

	std::bitset<256> m_signalS2Bit;
	std::bitset<256> m_signalS3Bit;
	std::bitset<256> m_signalS4Bit;
	std::bitset<256> m_signalS5Bit;
	std::bitset<256> m_signalS6Bit;
	std::bitset<256> m_signalS7Bit;


};


#endif // !CHESS_H